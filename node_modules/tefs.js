const database = require("Database");
function cleanupPNL(pnl){
	if(pnl == " Net P&L "){
		throw new Error("hmm");
		//dont do this anymore
//		await browser.close();
		return;
	}
	//clean up pnl
	pnl = pnl.replace(/\"/g, "");
	pnl = pnl.replace(/ /g, "");
	var sign = (pnl.includes("(")) ? "-" : "+";
	//negative val
	pnl = pnl.replace(/\(/g, "");
	pnl = pnl.replace(/\)/g, "");
	
	pnl = pnl.replace(/,/g, "");

	pnl = parseFloat(pnl);
	if(sign == "-")
		pnl = pnl * -1;
	return [pnl, sign]
}
module.exports = {
	getWinStreak(todayPNL){
		const fs = require("fs");
		var contents = fs.readFileSync("winStreak.json", "utf8");
		return contents;
	},
	async getTefs(username, password) {
		const puppeteer = require('puppeteer');
		const tefs = 'https://mts.tefsec.com/TradenetLogin.aspx';
		const browser = await puppeteer.launch({headless: false});
		const page = await browser.newPage();
		page.setDefaultTimeout(60000);
		await page.goto(tefs, { waitUntil: 'networkidle2' });

		/* Run javascript inside of the page */
		await page.evaluate((username, password) => {
			document.querySelector('input[name="TitansID"]').value = username;
			document.querySelector('input[name="Password"]').value = password;
			document.querySelector('input[name="Singin"]').click();
			}, username, password);
		//successfully logged in
		await page.waitForXPath("//td[contains(text(),'Blotter')]");
		var options = 
		{
			path: "dailyPNL.png",
			fullPage: false,
			clip:
			{
				x: 0,
				y: 400,
				width:1100,
				height:200
			}
		};
		let [pnl, totalEquity] = await page.evaluate(() => {
			var countRows = document.querySelectorAll("table.boxContentText")[6].querySelectorAll("td:last-child").length
			var pnl = document.querySelectorAll("table.boxContentText")[6].querySelectorAll("td:last-child")[countRows-1].textContent
			var totalEquity = document.querySelectorAll("table.boxContentText")[4].querySelectorAll("td:last-child")[5].textContent
			return [pnl, totalEquity];
		});
		var sign;
		[pnl, sign] = cleanupPNL(pnl)
		var pnlMessages = [];
		var message;
		database.query("select * from stockMessages order by pnl desc").then(rows => {
			var usedPnl;
			rows.forEach(element => {
				if(pnl > element.pnl){
					if(usedPnl != null && usedPnl != element.pnl)
						return
					usedPnl = element.pnl;
					pnlMessages.push(element.message);
				}
			});
			message = pnlMessages[Math.floor(Math.random()*pnlMessages.length)];
		}).catch( err => {
			console.log(err);
		}).finally(() => {
			console.log("running finally");
			database.close();
		});
		await page.screenshot(options);
		await browser.close();
		return message +" :"+ sign + "$" + pnl;
	}
}
//put testing here i guess